// 在 SCSS 代码中，下述开关：
//     /* autoprefixer: off */
// 不应放在文件【根作用域】中。
// 这是因为，本项目中的诸 .scss 文件，均可能由外界逐个挑选采用。
// 故而，在外界的某 .scss 文件中，会顺次导入本项目的若干各 .scss 文件。
// 此时，如果本项目的每个 .scss 文件根均带有 autoprefixer 开关，不论其取值为 on 或 off
// 那么 SCSS 编译器都会任务最终拼合的那个外界的 .scss 文件中，
// 其【根作用域】中出现过多个 autoprefixer 开关项。
// 进而， SCSS 编译器会在命令行窗口中不厌其烦的打印警告信息。
// 妥协的做法如下：
//     逐个在每个“非根”作用域中添加 autoprefixer 开关项。
//     例如 @mixin 定义块内、某个 css 规则内，等等。
//
// 顺便提及， Stylus 语言的代码中如果均在文件【根作用域】放置 autoprefixer 开关项，却不会有上述问题。
// 这证明，即便在第三方的 .styl 文件中顺次导入多个 .styl 文件，这些被导入的 .styl 文件仍保留各自独立的【根作用域】。





@import '../../_通用变量集_';





@mixin 可照搬之代码块__现成实用的双列_左右两列__仅尺寸与排版与行为() {
    flex-shrink: 1;
    flex-grow: 3;
    flex-basis: auto;
    width: 30em;
}





@mixin 可照搬之代码块__现成实用的双列_中央列__仅尺寸与排版与行为() {
    flex-shrink: 3;
    flex-grow: 1;
    flex-basis: auto;
    max-width: 20em;
    min-width: 6em;
    padding-left: 0.5em;
    padding-right: 0.5em;
}





@mixin 可照搬之代码块__现成实用的双列_中央列__仅尺寸与排版与行为_较窄() {
    flex-shrink: 0;
    flex-grow: 0;
    flex-basis: 1em;
    max-width: 1em;
    min-width: 1em;
    padding-left: 0em;
    padding-right: 0em;
}





@mixin 可照搬之代码块_现成实用的双列_仅尺寸与排版与行为() {
    /* autoprefixer: off */

    // 【现成实用的双列】。
    #{$吴乐川_任意两列间转移条目__标志性选择器__prebuilt_dual_columns__root} {
        #{$吴乐川_任意两列间转移条目__css变量名__chief_blocks_border_width}: 2px;
        // #{$吴乐川_任意两列间转移条目__css变量名__input_boxes_border_width}: 'var(%s)' % unquote(wlc_transfer_items_among_columns__css_var_name__chief_blocks_border_width);

        display: flex;
        flex-direction: column;
        box-sizing: border-box;
        height: 100%;

        .总标题栏 {
            flex: 0 0;
        }

        .底部内容栏 {
            flex: 0 0;
            padding: 0 1em;
        }

        .容纳着双列的中央主体 {
            flex: 1 1;
            display: flex;
            flex-direction: row;
            align-items: stretch;
            overflow: auto;

            // 为了在出现滚动条的情形给主体内容四周留白。
            padding: 1em;
        }

        #{$吴乐川_任意两列间转移条目__标志性选择器__single_list_column__root} {
            @include 可照搬之代码块__现成实用的双列_左右两列__仅尺寸与排版与行为();

            min-width: 20em;
            min-height: 30em;
        }

        #{$吴乐川_任意两列间转移条目__标志性选择器__default_center_column_between_2_list_columns__root} {
            @include 可照搬之代码块__现成实用的双列_中央列__仅尺寸与排版与行为();
        }



        .用以影响柔性布局之中央占位块 {
            @include 可照搬之代码块__现成实用的双列_中央列__仅尺寸与排版与行为();

            box-sizing: border-box;
            height: 100%;
        }



        .底部内容栏之默认内容 {
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
            box-sizing: border-box;
            padding: 1em;
            margin: 0 -1em;
            height: 6em;

            .功能块 {
                @include 可照搬之代码块__现成实用的双列_左右两列__仅尺寸与排版与行为();

                position: relative;
                display: block;
                text-align: center;
            }

            .功能单体-主体为按钮 {
                display: inline-block;
                position: relative;
            }

            .迁移条目之按钮 {
                font-size: 1.25em;
                margin: 0;
            }
        }

        &.无需中央列之功能 {

            .用以影响柔性布局之中央占位块 {
                @include 可照搬之代码块__现成实用的双列_中央列__仅尺寸与排版与行为_较窄();
            }
        }
    }
}

@if $吴乐川_任意两列间转移条目__标志性选择器__本部件专属样式之外层包裹 != null {
    #{$吴乐川_任意两列间转移条目__标志性选择器__本部件专属样式之外层包裹} {
        @include 可照搬之代码块_现成实用的双列_仅尺寸与排版与行为();
    }
} @else {
    @include 可照搬之代码块_现成实用的双列_仅尺寸与排版与行为();
}
