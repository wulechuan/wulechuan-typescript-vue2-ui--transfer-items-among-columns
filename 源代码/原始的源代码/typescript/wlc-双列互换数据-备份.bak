<template>
    <div class="wlc-dual-columns-exchange-items">
        <header v-if="!hasNotTitleBar" class="title-bar">
            <slot name="title-bar" ></slot>
        </header>

        <div class="chief-part">
            <div class="column-of-list left-column">
                <header class="heading-block">
                    <div class="column-title-bar">{{ decided_leftColumnSubTitleText }}</div>

                    <div class="column-filter">
                        <input
                            v-model="甲列之状态.filteringKeyword"
                            :placeholder="columnFilterPlaceholderText('甲列')"
                            class="column-filter-input"
                            :class="{ 'emphasize-to-call-to-action': leftNotShowingAllItems }"
                            :disabled="甲列之状态.allItems.length < 1"
                        >
                    </div>

                    <div class="column-check-all">
                        <label
                            class="el-checkbox column-check-all--including-hidden"
                            :class="getStateOfColumnCheckAllIncludingHidden('甲列').labelElementCSSClassNames"
                        ><span
                            class="el-checkbox__input"
                            :class="getStateOfColumnCheckAllIncludingHidden('甲列').psuedoCheckboxSpanCSSClassNames"
                        ><span class="el-checkbox__inner" ></span><input
                            v-model="甲列之状态.allAreChecked"
                            type="checkbox"
                            aria-hidden="false"
                            class="el-checkbox__original"
                            :disabled="getStateOfColumnCheckAllIncludingHidden('甲列').disabled"
                            @change="handleColumnCheckAllIncludingHiddenChange('甲列')"
                        ></span><span class="el-checkbox__label">{{ getStateOfColumnCheckAllIncludingHidden('甲列').labelText }}</span></label>

                        <label
                            class="el-checkbox column-check-all--visible-only"
                            :class="getStateOfColumnCheckAllVisible('甲列').labelElementCSSClassNames"
                        ><span
                            class="el-checkbox__input"
                            :class="getStateOfColumnCheckAllVisible('甲列').psuedoCheckboxSpanCSSClassNames"
                        ><span class="el-checkbox__inner" ></span><input
                            v-model="甲列之状态.allVisibleAreChecked"
                            type="checkbox"
                            aria-hidden="false"
                            class="el-checkbox__original"
                            :disabled="getStateOfColumnCheckAllVisible('甲列').disabled"
                            @change="handleColumnCheckAllVisibleChange('甲列')"
                        ></span><span class="el-checkbox__label">{{ getStateOfColumnCheckAllVisible('甲列').labelText }}</span></label>
                    </div>

                    <dl class="counts-summary">
                        <div class="entry all">
                            <dt>总数</dt>
                            <dd>
                                <span class="all"><span class="value">{{ 甲列之状态.allItems.length }}</span></span>

                                <span class="shown">
                                    <span class="prefix">（ 已列示</span>
                                    <span class="value">{{ leftShownItems.length }}</span>
                                    <span class="suffix">）</span>
                                </span>
                            </dd>
                        </div>
                        <div class="entry checked">
                            <dt>已勾选</dt>
                            <dd>
                                <span class="all"><span class="value">{{ leftCheckedItems.length }}</span></span>

                                <span class="shown">
                                    <span class="prefix">（ 已列示</span>
                                    <span class="value">{{ leftShownCheckedItems.length }}</span>
                                    <span class="suffix">）</span>
                                </span>
                            </dd>
                        </div>
                    </dl>
                </header>

                <div class="column-list-container">
                    <div
                        v-if="leftNotShowingAllItems"
                        class="column-tip"
                    ><p>符合条件的条目太多，达<em>{{ leftMatchedItems.length }}</em>条。为确保程序不致僵死，暂不列示任何条目。</p>
                        <p><strong>请先输入筛选关键字，以减少须列示的条目。</strong></p></div>

                    <ol v-else class="column-list">
                        <li
                            v-for="条目 in leftShownItems"
                            :key="条目.唯一标识"
                            class="column-list-item"
                        ><label
                            class="el-checkbox"
                            :class="getCSSClassNamesOfItem(条目).labelElement"
                        ><span
                            style="display: none"
                            class="el-checkbox__input"
                            :class="getCSSClassNamesOfItem(条目).psuedoCheckboxSpan"
                        ><span class="el-checkbox__inner" ></span><input
                            v-model="条目.已选中"
                            type="checkbox"
                            aria-hidden="false"
                            class="el-checkbox__original"
                            :disabled="条目.已禁止选择"
                        ></span><span class="el-checkbox__label">{{ 条目.在界面中的称谓 }}</span></label></li>
                    </ol>
                </div>
            </div>

            <div class="center-column">
                <button
                    :type="decided_elementUITypeOfTransferingButtons[0]"
                    :icon="decided_iconOfTransferingButtons[0]"
                    :disabled="shouldDisableTransferingButton0"
                    @click="handleClickOfButtonOfTransferingToRightColumn"
                >{{ decided_labelTextOfTransferingButtons[0] }}</button>
                <sup
                    :value="leftCheckedItems.length || null"
                    type="danger"
                    class="badge badge-of-transfering-button-1"
                ></sup>

                <button
                    :type="decided_elementUITypeOfTransferingButtons[1]"
                    :icon="decided_iconOfTransferingButtons[1]"
                    :disabled="shouldDisableTransferingButton1"
                    @click="handleClickOfButtonOfTransferingToLeftColumn"
                >{{ decided_labelTextOfTransferingButtons[1] }}</button>
                <sup
                    :value="rightCheckedItems.length || null"
                    type="success"
                    class="badge badge-of-transfering-button-2"
                ></sup>
            </div>

            <div class="column-of-list right-column">
                <header class="heading-block">
                    <div class="column-title-bar">{{ decided_rightColumnSubTitleText }}</div>

                    <div class="column-filter">
                        <input
                            v-model="乙列之状态.filteringKeyword"
                            :placeholder="columnFilterPlaceholderText('乙列')"
                            class="column-filter-input"
                            :class="{ 'emphasize-to-call-to-action': rightNotShowingAllItems, 'emphasize-without-animation': leftNotShowingAllItems }"
                            :disabled="乙列之状态.allItems.length < 1"
                        >
                    </div>

                    <div class="column-check-all">
                        <label
                            class="el-checkbox"
                            :class="getStateOfColumnCheckAllIncludingHidden('乙列').labelElementCSSClassNames"
                        ><span
                            class="el-checkbox__input"
                            :class="getStateOfColumnCheckAllIncludingHidden('乙列').psuedoCheckboxSpanCSSClassNames"
                        ><span class="el-checkbox__inner" ></span><input
                            v-model="乙列之状态.allAreChecked"
                            type="checkbox"
                            aria-hidden="false"
                            class="el-checkbox__original"
                            :disabled="getStateOfColumnCheckAllIncludingHidden('乙列').disabled"
                            @change="handleColumnCheckAllIncludingHiddenChange('乙列')"
                        ></span><span class="el-checkbox__label">{{ getStateOfColumnCheckAllIncludingHidden('乙列').labelText }}</span></label>

                        <label
                            class="el-checkbox"
                            :class="getStateOfColumnCheckAllVisible('乙列').labelElementCSSClassNames"
                        ><span
                            class="el-checkbox__input"
                            :class="getStateOfColumnCheckAllVisible('乙列').psuedoCheckboxSpanCSSClassNames"
                        ><span class="el-checkbox__inner" ></span><input
                            v-model="乙列之状态.allVisibleAreChecked"
                            type="checkbox"
                            aria-hidden="false"
                            class="el-checkbox__original"
                            :disabled="getStateOfColumnCheckAllVisible('乙列').disabled"
                            @change="handleColumnCheckAllVisibleChange('乙列')"
                        ></span><span class="el-checkbox__label">{{ getStateOfColumnCheckAllVisible('乙列').labelText }}</span></label>
                    </div>

                    <dl class="counts-summary">
                        <div class="entry all">
                            <dt>总数</dt>
                            <dd>
                                <span class="all"><span class="value">{{ 乙列之状态.allItems.length }}</span></span>

                                <span class="shown">
                                    <span class="prefix">（ 已列示</span>
                                    <span class="value">{{ rightShownItems.length }}</span>
                                    <span class="suffix">）</span>
                                </span>
                            </dd>
                        </div>
                        <div class="entry checked">
                            <dt>已勾选</dt>
                            <dd>
                                <span class="all"><span class="value">{{ rightCheckedItems.length }}</span></span>

                                <span class="shown">
                                    <span class="prefix">（ 已列示</span>
                                    <span class="value">{{ rightShownCheckedItems.length }}</span>
                                    <span class="suffix">）</span>
                                </span>
                            </dd>
                        </div>
                    </dl>
                </header>

                <div class="column-list-container">
                    <div
                        v-if="rightNotShowingAllItems"
                        class="column-tip"
                    ><p>符合条件的条目太多，达<em>{{ rightMatchedItems.length }}</em>条。为确保程序不致僵死，暂不列示任何条目。</p>
                        <p><strong>请先输入筛选关键字，以减少须列示的条目。</strong></p></div>

                    <ol v-else class="column-list">
                        <li
                            v-for="条目 in rightShownItems"
                            :key="条目.唯一标识"
                            class="column-list-item"
                        ><label
                            class="el-checkbox"
                            :class="getCSSClassNamesOfItem(条目).labelElement"
                        ><span
                            style="display: none"
                            class="el-checkbox__input"
                            :class="getCSSClassNamesOfItem(条目).psuedoCheckboxSpan"
                        ><span class="el-checkbox__inner" ></span><input
                            v-model="条目.已选中"
                            type="checkbox"
                            aria-hidden="false"
                            class="el-checkbox__original"
                            :disabled="条目.已禁止选择"
                        ></span><span class="el-checkbox__label">{{ 条目.在界面中的称谓 }}</span></label></li>
                    </ol>
                </div>
            </div>
        </div>

        <footer v-if="hasFooterBar" class="footer-bar">
            <slot name="footer-bar"></slot>
        </footer>
    </div>
</template>

<script lang="ts">
import { Vue, Component, Prop, Model, Watch } from 'vue-property-decorator'

type 范_列之内部代号 = Wlc双列互换数据.范_列之内部代号
type 范_条目 = Wlc双列互换数据.范_条目
type 范_条目之列表 = Wlc双列互换数据.范_条目之列表
type 范_条目之唯一标识 = 范_条目['唯一标识']

const 单列允许列示的条目数之上限_默认值 = 9

@Component({})
export default class Wlc双列互换数据 extends Vue {
    @Model('change') public value?: Array<范_条目之唯一标识>

    @Prop() public allCandidatesOfBothColumns?: 范_条目之列表
    @Prop() public maxCountOfItemsToDisplayInEitherColumn?: number
    @Prop() public hasNotTitleBar?: boolean
    @Prop() public hasFooterBar?: boolean
    @Prop() public leftColumnSubTitleText?: string
    @Prop() public rightColumnSubTitleText?: string
    @Prop() public labelTextOfTransferingButtons?: Array<string>
    @Prop() public elementUITypeOfTransferingButtons?: Array<any>

    private 甲列之状态: Wlc双列互换数据.范_单列之内部数据集 = {
        filteringKeyword: '',
        allAreChecked: false,
        allVisibleAreChecked: false,
        allItems: [],
        checkedItemsCache: [],
    }

    private 乙列之状态: Wlc双列互换数据.范_单列之内部数据集 = {
        filteringKeyword: '',
        allAreChecked: false,
        allVisibleAreChecked: false,
        allItems: [],
        checkedItemsCache: [],
    }

    private get decided_maxCountOfItemsToDisplayInEitherColumn (): number {
        const _v = this.maxCountOfItemsToDisplayInEitherColumn

        let v: number
        if (typeof _v !== 'number') {
            v = NaN
        } else if (typeof _v === 'string') {
            v = +_v
        } else {
            v = _v
        }

        if (v > 0) { return v }

        return 单列允许列示的条目数之上限_默认值
    }

    private get decided_leftColumnSubTitleText (): string {
        return this.leftColumnSubTitleText || '未选择的条目'
    }

    private get decided_rightColumnSubTitleText (): string {
        return this.rightColumnSubTitleText || '已选择的条目'
    }

    private get decided_labelTextOfTransferingButtons (): Array<string> {
        const defaultValues = ['>', '<']
        return this.getValuePairOfTransferingButtons(this.labelTextOfTransferingButtons, defaultValues)
    }

    private get decided_elementUITypeOfTransferingButtons (): Array<unknown> {
        const defaultValues = ['primary', 'primary']
        return this.getValuePairOfTransferingButtons(this.elementUITypeOfTransferingButtons, defaultValues)
    }

    private get decided_iconOfTransferingButtons (): Array<string | null> {
        const [labelLeft, labelRight] = this.decided_labelTextOfTransferingButtons
        return [
            labelLeft ? null : 'el-icon-arrow-right',
            labelRight ? null : 'el-icon-arrow-left',
        ]
    }

    private get leftEnabledItems (): 范_条目之列表 {
        return this.甲列之状态.allItems.filter(条目 => {

        })
        // return this.甲列之状态.allItems.filter(条目 => !条目.已禁止选择)
    }

    private get rightEnabledItems (): 范_条目之列表 {
        return this.乙列之状态.allItems.filter(条目 => !条目.已禁止选择)
    }

    private get leftMatchedItems (): 范_条目之列表 {
        const {
            allItems,
            filteringKeyword,
        } = this.甲列之状态

        let 所有匹配的条目 = allItems
        if (filteringKeyword) {
            const 用以匹配条目的正则表达式 = new RegExp(`${filteringKeyword}`, 'i')
            所有匹配的条目 = allItems.filter(条目 => 用以匹配条目的正则表达式.test(条目.在界面中的称谓))
        }

        return 所有匹配的条目
    }

    private get rightMatchedItems (): 范_条目之列表 {
        const {
            allItems,
            filteringKeyword,
        } = this.乙列之状态

        let 所有匹配的条目 = allItems
        if (filteringKeyword) {
            const 用以匹配条目的正则表达式 = new RegExp(`${filteringKeyword}`, 'i')
            所有匹配的条目 = allItems.filter(条目 => 用以匹配条目的正则表达式.test(条目.在界面中的称谓))
        }

        return 所有匹配的条目
    }

    private get leftShownItems (): 范_条目之列表 {
        const { decided_maxCountOfItemsToDisplayInEitherColumn } = this

        const itemsToShow = this.leftMatchedItems
        const tooManyItemsToShow = itemsToShow.length > decided_maxCountOfItemsToDisplayInEitherColumn
        if (tooManyItemsToShow) { return [] }

        return itemsToShow
    }

    private get rightShownItems (): 范_条目之列表 {
        const { decided_maxCountOfItemsToDisplayInEitherColumn } = this

        const itemsToShow = this.rightMatchedItems
        const tooManyItemsToShow = itemsToShow.length > decided_maxCountOfItemsToDisplayInEitherColumn
        if (tooManyItemsToShow) { return [] }

        return itemsToShow
    }

    private get leftNotShowingAllItems (): boolean {
        return this.leftShownItems.length === 0 && this.leftMatchedItems.length > 0
    }

    private get rightNotShowingAllItems (): boolean {
        return this.rightShownItems.length === 0 && this.rightMatchedItems.length > 0
    }

    private get leftCheckedItems (): 范_条目之列表 {
        const checkedItems = this.甲列之状态.allItems.filter(条目 => !条目.已禁止选择 && !!条目.已选中)
        this.甲列之状态.checkedItemsCache = [...checkedItems] // eslint-disable-line
        return checkedItems
    }

    private get rightCheckedItems (): 范_条目之列表 {
        const checkedItems = this.乙列之状态.allItems.filter(条目 => !条目.已禁止选择 && !!条目.已选中)
        this.乙列之状态.checkedItemsCache = [...checkedItems] // eslint-disable-line
        return checkedItems
    }

    private get leftShownCheckedItems (): 范_条目之列表 {
        return this.leftShownItems.filter(条目 => !条目.已禁止选择 && !!条目.已选中)
    }

    private get rightShownCheckedItems (): 范_条目之列表 {
        return this.rightShownItems.filter(条目 => !条目.已禁止选择 && !!条目.已选中)
    }

    private get shouldDisableTransferingButton0 (): boolean {
        return this.leftCheckedItems.length === 0
    }

    private get shouldDisableTransferingButton1 (): boolean {
        return this.rightCheckedItems.length === 0
    }

    @Watch('value')
    onValueChanged () {
        this.generateItemsOfBothColumns()
    }

    @Watch('allCandidatesOfBothColumns')
    onCandidatesChanged () {
        this.generateItemsOfBothColumns()
    }

    mounted () {
        this.generateItemsOfBothColumns()
    }

    private columnFilterPlaceholderText (side: 范_列之内部代号): '筛选左侧条目' | '筛选右侧条目' | '无条目可筛选' {
        let candidates: 范_条目之列表
        if (side === '甲列') {
            candidates = this.甲列之状态.allItems
        } else {
            candidates = this.乙列之状态.allItems
        }

        if (candidates.length > 0) {
            if (side === '甲列') {
                return '筛选左侧条目'
            } else {
                return '筛选右侧条目'
            }
        }

        return '无条目可筛选'
    }

    private getValuePairOfTransferingButtons (providedValueArray: any, defaultValueArray: Array<string>): Array<string> {
        if (!Array.isArray(defaultValueArray)) {
            throw new Error('<wlc-dual-columns-exchange-items />: getValuePairOfTransferingButtons() defaultValueArray 无效。')
        }

        if (!Array.isArray(providedValueArray)) { return defaultValueArray }

        const usedValueArray = [...defaultValueArray]
        const [valueOfLeft, valueOfRight] = providedValueArray

        if (typeof valueOfLeft === 'string') {
            usedValueArray[0] = valueOfLeft // .trim()
        }

        if (typeof valueOfRight === 'string') {
            usedValueArray[1] = valueOfRight // .trim()
        }

        return usedValueArray
    }

    private generateItemsOfBothColumns () {
        let rightsideValues: Array<范_条目之唯一标识>
        let candidates: 范_条目之列表

        if (Array.isArray(this.value)) {
            rightsideValues = this.value
        } else {
            rightsideValues = []
        }

        if (Array.isArray(this.allCandidatesOfBothColumns)) {
            candidates = this.allCandidatesOfBothColumns
        } else {
            candidates = []
        }

        const leftCheckedItemsCache = this.甲列之状态.checkedItemsCache
        const rightCheckedItemsCache = this.乙列之状态.checkedItemsCache

        const itemsDeduplicatedDict: {
            [value: string]: number;
        } = {}

        const leftAllItems: 范_条目之列表 = []
        const rightAllItems: 范_条目之列表 = []

        candidates.forEach(原始条目 => {
            if (!原始条目) { return }
            const {
                唯一标识: 该条目之唯一标识,
                已禁止选择: 该条目已禁止选择,
            } = 原始条目

            if (该条目之唯一标识 in itemsDeduplicatedDict) {
                const dupCount = itemsDeduplicatedDict[该条目之唯一标识]
                itemsDeduplicatedDict[该条目之唯一标识]++
                console.error(`<wlc-dual-columns-exchange-items>：发现 唯一标识 （${该条目之唯一标识}）第${dupCount}个重复的条目。`)
                return
            }

            itemsDeduplicatedDict[该条目之唯一标识] = 1

            const 条目 = {
                ...原始条目,

                已选中: false,
            }

            const 该条目应位于乙列中: boolean = rightsideValues.includes(该条目之唯一标识)

            // if (该条目应位于乙列中) {
            //   console.debug(`${value}`, 该条目应位于乙列中)
            // }

            if (该条目应位于乙列中) {
                if (!该条目已禁止选择) {
                    const cachedUXItem = rightCheckedItemsCache.find(条目 => 条目.唯一标识 === 该条目之唯一标识)
                    if (cachedUXItem) {
                        条目.已选中 = cachedUXItem.已选中
                    }
                }

                rightAllItems.push(条目)
            } else {
                if (!该条目已禁止选择) {
                    const cachedUXItem = leftCheckedItemsCache.find(条目 => 条目.唯一标识 === 该条目之唯一标识)
                    if (cachedUXItem) {
                        条目.已选中 = cachedUXItem.已选中
                    }
                }

                leftAllItems.push(条目)
            }
        })

        this.甲列之状态.allItems = leftAllItems
        this.乙列之状态.allItems = rightAllItems

        // this.甲列之状态.filteringKeyword = ''
        // this.乙列之状态.filteringKeyword = ''

        const dupKeys = Object.keys(itemsDeduplicatedDict).filter(key => itemsDeduplicatedDict[key] > 1)
        if (dupKeys.length > 0) {
            const totalDupCountOfAll = dupKeys.reduce((total, key) => {
                return total + itemsDeduplicatedDict[key] - 1
            }, 0)

            const errorMessage = `总计有 ${dupKeys.length} 种候选项出现重复项。重复项累计 ${totalDupCountOfAll} 条。`
            console.error(errorMessage)
            // this.$message.error(errorMessage)
        }
    }

    private getCSSClassNamesOfItem (条目: 范_条目) {
        if (!条目) { return null }

        const 已选中 = !!条目.已选中
        const 已禁止选择 = !!条目.已禁止选择

        return {
            labelElement: {
                'is-checked': 已选中,
                'is-disabled': 已禁止选择,
            },
            psuedoCheckboxSpan: {
                'is-checked': 已选中,
                'is-disabled': 已禁止选择,
            },
        }
    }

    private getStateOfColumnCheckAllIncludingHidden (side: 范_列之内部代号) {
        let allEnabledItems: 范_条目之列表
        if (side === '甲列') {
            allEnabledItems = this.leftEnabledItems
        } else {
            allEnabledItems = this.rightEnabledItems
        }

        let labelElementCSSClassNames = null
        let psuedoCheckboxSpanCSSClassNames = null
        let labelText = '无可勾选项'

        const disabled = allEnabledItems.length === 0
        if (disabled) {
            labelElementCSSClassNames = 'is-disabled'
            psuedoCheckboxSpanCSSClassNames = 'is-disabled'
        } else {
            const noneAreChecked = allEnabledItems.every(条目 => !条目.已选中)

            if (noneAreChecked) {
                labelText = '全部勾选（含未列示条目）'
                labelElementCSSClassNames = ''
                psuedoCheckboxSpanCSSClassNames = ''
            } else {
                const allAreChecked = allEnabledItems.every(条目 => 条目.已选中)

                if (allAreChecked) {
                    labelText = '全部去掉勾选（含未列示条目）'
                    labelElementCSSClassNames = 'is-checked'
                    psuedoCheckboxSpanCSSClassNames = 'is-checked'
                } else {
                    labelText = '全部勾选（含未列示条目）'
                    labelElementCSSClassNames = 'is-indeterminate'
                    psuedoCheckboxSpanCSSClassNames = 'is-indeterminate'
                }
            }
        }

        return {
            labelElementCSSClassNames,
            psuedoCheckboxSpanCSSClassNames,
            disabled,
            labelText,
        }
    }

    private getStateOfColumnCheckAllVisible (side: 范_列之内部代号) {
        let allEnabledItems: 范_条目之列表
        if (side === '甲列') {
            allEnabledItems = this.leftShownItems
        } else {
            allEnabledItems = this.rightShownItems
        }

        let labelElementCSSClassNames = null
        let psuedoCheckboxSpanCSSClassNames = null
        let labelText = '无可勾选项'

        const disabled = allEnabledItems.length === 0
        if (disabled) {
            labelElementCSSClassNames = 'is-disabled'
            psuedoCheckboxSpanCSSClassNames = 'is-disabled'
        } else {
            const noneVisibleAreChecked = allEnabledItems.every(条目 => !条目.已选中)

            if (noneVisibleAreChecked) {
                labelText = '全部勾选（仅列示条目）'
                labelElementCSSClassNames = ''
                psuedoCheckboxSpanCSSClassNames = ''
            } else {
                const allVisibleAreChecked = allEnabledItems.every(条目 => 条目.已选中)
                if (allVisibleAreChecked) {
                    labelText = '全部去掉勾选（仅列示条目）'
                    labelElementCSSClassNames = 'is-checked'
                    psuedoCheckboxSpanCSSClassNames = 'is-checked'
                } else {
                    labelText = '全部勾选（仅列示条目）'
                    labelElementCSSClassNames = 'is-indeterminate'
                    psuedoCheckboxSpanCSSClassNames = 'is-indeterminate'
                }
            }
        }

        return {
            labelElementCSSClassNames,
            psuedoCheckboxSpanCSSClassNames,
            disabled,
            labelText,
        }
    }

    private handleColumnCheckAllIncludingHiddenChange (side: 范_列之内部代号) {
        let allEnabledItems: 范_条目之列表
        if (side === '甲列') {
            allEnabledItems = this.leftEnabledItems
        } else {
            allEnabledItems = this.rightEnabledItems
        }

        const allAreChecked = allEnabledItems.every(条目 => 条目.已选中)
        const shouldCheckAll = !allAreChecked

        allEnabledItems.forEach(条目 => { 条目.已选中 = shouldCheckAll })
        if (side === '甲列') {
            this.甲列之状态.allAreChecked = allAreChecked
        } else {
            this.乙列之状态.allAreChecked = allAreChecked
        }
    }

    private handleColumnCheckAllVisibleChange (side: 范_列之内部代号) {
        let allShownItems: 范_条目之列表
        if (side === '甲列') {
            allShownItems = this.leftShownItems
        } else {
            allShownItems = this.rightShownItems
        }

        const allVisibleAreChecked = allShownItems.every(条目 => 条目.已选中)
        const shouldCheckAll = !allVisibleAreChecked

        allShownItems.forEach(条目 => {
            if (条目.已禁止选择) { return }
            条目.已选中 = shouldCheckAll
        })

        if (side === '甲列') {
            this.甲列之状态.allVisibleAreChecked = allVisibleAreChecked
        } else {
            this.乙列之状态.allVisibleAreChecked = allVisibleAreChecked
        }
    }

    private handleClickOfButtonOfTransferingToRightColumn () {
        this.transferLeftCheckedItemsToRight()
    }

    private handleClickOfButtonOfTransferingToLeftColumn () {
        this.transferRighttColumnCheckedItemsToLeft()
    }

    private transferLeftCheckedItemsToRight () {
        const restOfLeft: 范_条目之列表 = []
        const toMoveToRight: 范_条目之列表 = []

        this.甲列之状态.allItems.forEach(条目 => {
            if (!条目.已禁止选择 && 条目.已选中) {
                toMoveToRight.push(条目)
                条目.已选中 = false
            } else {
                restOfLeft.push(条目)
            }
        })

        this.甲列之状态.allItems = restOfLeft
        this.乙列之状态.allItems = [...toMoveToRight, ...this.乙列之状态.allItems]

        this.emitChangeEvent()
    }

    private transferRighttColumnCheckedItemsToLeft () {
        const restOfRight: 范_条目之列表 = []
        const toMoveToLeft: 范_条目之列表 = []

        this.乙列之状态.allItems.forEach(条目 => {
            if (!条目.已禁止选择 && 条目.已选中) {
                toMoveToLeft.push(条目)
                条目.已选中 = false
            } else {
                restOfRight.push(条目)
            }
        })

        this.乙列之状态.allItems = restOfRight
        this.甲列之状态.allItems = [...toMoveToLeft, ...this.甲列之状态.allItems]

        this.emitChangeEvent()
    }

    private emitChangeEvent () {
        const payload = this.乙列之状态.allItems.map(uxItem => uxItem.唯一标识)
        this.$emit('change', payload)
    }
}
</script>

<style lang="stylus">
.wlc-dual-columns-exchange-items {
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    height: 100%;

    // > .title-bar {
    //     flex: 0 0;
    //     min-height: 3.5rem;
    //     max-height: 3.5rem;
    // }

    > .footer-bar {
        flex: 0 0;
        min-height: 2.5rem;
        max-height: 2.5rem;
    }

    > .chief-part {
        flex: 1 1;
        overflow: hidden;
        display: flex;
        align-items: stretch;

        > .center-column {
            flex: 0 0;
            min-width: 3.5rem;
            max-width: 3.5rem;
            box-sizing: border-box;
        }

        > .column-of-list {
            flex: 1 1;
            width: 50%;
            box-sizing: border-box;
            overflow: hidden;
        }

        > .center-column {
            padding: 11rem 0.5rem 0.5rem;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            align-items: center;

            .el-badge {
                display: block;
                max-width: 100%;
                margin: 0.25rem auto;

                .el-badge__content {
                    transform: translateX(-50%);
                    left: 50%;
                    right: auto;
                    margin: -0.9rem auto;
                    width: auto;
                    min-width: 1.1rem;
                    height: 1.1rem;
                    line-height: 1rem;
                    padding: 0 0.25rem 0 0.3rem;
                    border-radius: 0.55rem;
                }
            }

            .badge-of-transfering-button-1 .el-badge__content {
                top: 0;
                bottom: auto;
            }

            .badge-of-transfering-button-2 .el-badge__content {
                top: auto;
                bottom: 0;
            }

            button {
                box-sizing: border-box;
                display: block;
                max-width: 100%;

                i ~ span {
                    margin: -0.05rem;
                }
            }
        }
    }

    .column-of-list {
        display: flex;
        flex-direction: column;
        border-width: 1px;
        border-style: solid;

        .column-tip {
            padding: 0.25rem 0.75rem;
            margin: 0.75rem 0.25rem;
            line-height: 1.5;

            p {
                margin: 0.25rem 0;
            }

            em {
                font-style: normal;
                margin: 0 0.2rem;
            }

            strong {
                font-style: normal;
                font-weight: normal;
            }
        }

        .column-title-bar {
            padding: 0.5rem 0.75rem;
            text-align: center;
        }

        .column-filter {
            flex: 0 0 2rem;
            padding: 0.5rem 0.75rem;
            position: relative;
            // margin-bottom: -0.25rem;
            display: block;

            .el-icon-search {
                position: absolute;
                top: 0.5rem;
                left: 0.75rem;
                height: 32px;
                line-height: 32px;
                width: 1.8rem;
                text-align: center;
                pointer-events: none;
            }
        }

        .column-filter-input {
            box-sizing: border-box;
            width: 100%;
            height: 2rem;
            font-size: 1rem;
            padding-left: 1.25rem;
            border-radius: 10rem;
            border-style: solid;

            &.emphasize-to-call-to-action {
                animation-iteration-count: infinite;
                animation-duration: 2s;
            }
        }

        .column-check-all {
            padding: 0rem 0.5rem 0.25rem 0.5rem;

            .el-checkbox {
                display: block;
                padding: 0.2rem 0.25rem 0.2rem 0.5rem;
                margin: 0;
                border-radius: 0.2rem;

                &.is-disabled {
                    cursor: not-allowed;
                }
            }

            .el-checkbox__input {
                margin-top: -0.1rem;

                &.is-disabled {
                    visibility: hidden;
                }
            }
        }

        .counts-summary {
            margin: 0;
            padding: 0.25rem 0.75rem 0.3rem 0.75rem;

            .entry {
                display: flex;
                max-width: 30rem;
            }

            dt,
            dd {
                padding: 0.25rem;
                margin: 0;
            }

            dt {
                flex: 0 0 20%;
                display: block;
            }

            dd {
                flex: 1 1 auto;
                display: flex;

                > span {
                    flex: 1 1;
                    display: flex;
                    text-align: right;
                    justify-content: flex-end;

                    .value {
                        display: block;
                        padding: 0.1rem 0.25rem;
                        margin: -0.1rem 0.33rem -0.1rem 0.5rem;
                        border-radius: 0.2rem;
                    }

                    &.all {
                        flex: 1 1 31%

                        .value {
                            flex: 0 0 4rem
                        }
                    }

                    &.shown {
                        flex: 2 2 69%
                        margin-left: 1.5rem

                        .value {
                            flex: 0 0 4rem
                        }
                    }

                    .prefix,
                    .suffix {
                        flex: 0 0 auto;
                    }
                }
            }
        }

        .column-list-container {
            display: flex;
            flex-direction: column;
            overflow: hidden;
            flex: 1 1;
            height: 100%;
            padding: 0.25rem;

            border-width: inherit;
            border-left-width: 0;
            border-right-width: 0;
            border-bottom-width: 0;
            border-style: inherit;
            border-color: inherit;
        }

        .column-list {
            list-style: none;
            padding: 0;
            flex: 1 1;
            height: 100%;
            overflow: auto;
            overflow-y: scroll;
            padding: 0;
            margin: 0;

            .column-list-item {
                padding: 0 0.25rem;

                > label {
                    display: block;
                    padding: 0.2rem 0.25rem 0.2rem 0.5rem;
                    overflow: hidden;

                    &.is-disabled {
                        cursor: not-allowed;

                        .el-checkbox__input {
                            visibility: hidden;
                        }
                    }
                }
            }
        }
    }

    /**
    * 所有与颜色相关的定义如下。
    */
    & {
        color: black;

        .heading-block {
            border-color: inherit;
        }

        .center-column {

            .el-badge__content {
                box-shadow: 0 0 0.25rem rgba(black, 0.319);
            }
        }

        .column-title-bar {
            color: white;
            background-color: rgba(black, 0.515);
        }

        .column-of-list {
            // border-color: black;

            .column-tip {
                color: #bbb;
                border-color: rgba(black, 0.19);
                background-color: rgba(black, 0.75);
                box-shadow: 0 0 0.25rem rgba(black, 0.515);

                em {
                    color: rgb(90, 236, 61);
                }

                strong {
                    color: #faa;

                    // animation-name: dual-list-transferer-tip-text-flashing;
                    // animation-iteration-count: infinite;
                    // animation-duration: 4.5s;

                    // @keyframes dual-list-transferer-tip-text-flashing {
                    //   0%, 100% { color: #faa; }
                    //   50% { color: #f88; }
                    // }
                }
            }

            .column-filter {
                border-color: inherit;

                .el-input__icon {
                    color: #999;
                }
            }

            .column-filter-input {
                border-color: inherit;

                // border-color: rgba(black, 0.75);

                &[disabled] {
                    border-color: rgba(black, 0.1);
                    background-color: rgba(white, 0.319);
                }
            }

            .column-check-all {

                .el-checkbox {

                    &:hover {
                        background-color: rgba(black, 0.1);
                    }

                    &.is-disabled {
                        background-color: transparent;
                    }
                }

                .el-checkbox__label {
                    color: black;
                }
            }

            .counts-summary {
                background-color: rgba(black, 0.1);

                dt,
                dd {
                    color: #666;
                }

                .all,
                .shown {
                    color: black;
                    text-shadow: 0 0 1px rgba(black, 0.25);
                }

                .checked .all .value {
                    text-shadow: none;
                    color: white;
                    background-color: black;
                }

                .checked .shown .value {
                    text-shadow: none;
                    color: white;
                    background-color: rgba(black, 0.5);
                }
            }

            .column-list-container {
                box-shadow: inset 0 0 0.3rem rgba(black, 0.319);
            }

            &.left-column {
                border-color: #6e4f4f;

                .heading-block {
                    background-color: #ffdfdf;
                }

                .column-filter-input {

                    // input {
                    //     border-color: rgba(black, 0.75);

                    //     &[disabled] {
                    //         border-color: rgba(black, 0.1);
                    //         background-color: rgba(white, 0.319);
                    //     }
                    // }

                    &.emphasize-to-call-to-action {
                        border-color: #f00;
                        animation-name: dual-list-transferer-input-box1-call-to-action;
                        @keyframes dual-list-transferer-input-box1-call-to-action {
                            0%, 100% { border-color: #f00; }
                            40%, 60% { border-color: #fbb; }
                        }
                    }
                }
            }

            &.right-column {
                border-color: #304735;

                .heading-block {
                    background-color: #ddfce5;
                }

                .column-filter-input {

                    // input {
                    //     border-color: rgba(black, 0.75);

                    //     &[disabled] {
                    //         border-color: rgba(black, 0.1);
                    //         background-color: rgba(white, 0.319);
                    //     }
                    // }

                    &.emphasize-to-call-to-action {
                        border-color: #090;
                        animation-name: dual-list-transferer-input-box2-call-to-action;
                        @keyframes dual-list-transferer-input-box2-call-to-action {
                            0%, 100% { border-color: #aea; }
                            40%, 60% { border-color: #090; }
                        }

                        &.emphasize-without-animation {
                            animation-name: none;
                        }
                    }
                }
            }

            .column-list {

                .column-list-item > label {

                    &:hover {
                        // background-color: #dbeafa;
                        background-color: #eee;
                    }

                    &.is-checked {
                        // background-color: #409EFF;
                        background-color: #777;

                        .el-checkbox__label {
                            color: white;
                        }
                    }

                    &.is-disabled {
                        color: #444;
                        background-color: #e4e4e4;
                    }
                }
            }
        }
    }
}
</style>
